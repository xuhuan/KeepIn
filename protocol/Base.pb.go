// Code generated by protoc-gen-go.
// source: Base.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	Base.proto
	Cluster.proto
	Login.proto
	Message.proto
	Other.proto
	TransferService.proto
	User.proto

It has these top-level messages:
	ClusterRequest
	ClusterServerInfo
	LoginRequest
	LoginResponse
	LoginData
	LogoutRequest
	LogoutResponse
	LoginRequest
	LoginResponse
	LoginData
	LogoutRequest
	LogoutResponse
	MessageData
	HeartBeat
	TransferMsg
	UserInfo
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// 服务ID，对不同的协议进行归类
type ServiceID int32

const (
	ServiceID_LOGIN            ServiceID = 0
	ServiceID_FRIEND           ServiceID = 1
	ServiceID_MESSAGE          ServiceID = 2
	ServiceID_TRNASFER_SERVICE ServiceID = 3
	ServiceID_USER             ServiceID = 4
	ServiceID_OTHER            ServiceID = 5
)

var ServiceID_name = map[int32]string{
	0: "LOGIN",
	1: "FRIEND",
	2: "MESSAGE",
	3: "TRNASFER_SERVICE",
	4: "USER",
	5: "OTHER",
}
var ServiceID_value = map[string]int32{
	"LOGIN":            0,
	"FRIEND":           1,
	"MESSAGE":          2,
	"TRNASFER_SERVICE": 3,
	"USER":             4,
	"OTHER":            5,
}

func (x ServiceID) String() string {
	return proto.EnumName(ServiceID_name, int32(x))
}
func (ServiceID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 登陆相关命令
type LoginCmdID int32

const (
	LoginCmdID_LOGIN_REQ        LoginCmdID = 0
	LoginCmdID_LOGIN_RES        LoginCmdID = 1
	LoginCmdID_LOGOUT_REQ       LoginCmdID = 2
	LoginCmdID_LOGOUT_RES       LoginCmdID = 3
	LoginCmdID_DEVICE_TOKEN_REQ LoginCmdID = 4
	LoginCmdID_DEVICE_TOKEN_RES LoginCmdID = 5
	LoginCmdID_MSG_SERVER_REQ   LoginCmdID = 6
	LoginCmdID_MSG_SERVER_RES   LoginCmdID = 7
)

var LoginCmdID_name = map[int32]string{
	0: "LOGIN_REQ",
	1: "LOGIN_RES",
	2: "LOGOUT_REQ",
	3: "LOGOUT_RES",
	4: "DEVICE_TOKEN_REQ",
	5: "DEVICE_TOKEN_RES",
	6: "MSG_SERVER_REQ",
	7: "MSG_SERVER_RES",
}
var LoginCmdID_value = map[string]int32{
	"LOGIN_REQ":        0,
	"LOGIN_RES":        1,
	"LOGOUT_REQ":       2,
	"LOGOUT_RES":       3,
	"DEVICE_TOKEN_REQ": 4,
	"DEVICE_TOKEN_RES": 5,
	"MSG_SERVER_REQ":   6,
	"MSG_SERVER_RES":   7,
}

func (x LoginCmdID) String() string {
	return proto.EnumName(LoginCmdID_name, int32(x))
}
func (LoginCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 好友、会话等相关命令。
type FriendCmdID int32

const (
	FriendCmdID_CID_FRIEND_REQ_ALL FriendCmdID = 0
	FriendCmdID_CID_FRIEND_RES_ALL FriendCmdID = 1
)

var FriendCmdID_name = map[int32]string{
	0: "CID_FRIEND_REQ_ALL",
	1: "CID_FRIEND_RES_ALL",
}
var FriendCmdID_value = map[string]int32{
	"CID_FRIEND_REQ_ALL": 0,
	"CID_FRIEND_RES_ALL": 1,
}

func (x FriendCmdID) String() string {
	return proto.EnumName(FriendCmdID_name, int32(x))
}
func (FriendCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 消息相关命令
type MessageCmdID int32

const (
	MessageCmdID_CID_MSG_DATA MessageCmdID = 0
)

var MessageCmdID_name = map[int32]string{
	0: "CID_MSG_DATA",
}
var MessageCmdID_value = map[string]int32{
	"CID_MSG_DATA": 0,
}

func (x MessageCmdID) String() string {
	return proto.EnumName(MessageCmdID_name, int32(x))
}
func (MessageCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 中转服务命令
type TransferServiceCmdID int32

const (
	TransferServiceCmdID_TRANSFER TransferServiceCmdID = 0
)

var TransferServiceCmdID_name = map[int32]string{
	0: "TRANSFER",
}
var TransferServiceCmdID_value = map[string]int32{
	"TRANSFER": 0,
}

func (x TransferServiceCmdID) String() string {
	return proto.EnumName(TransferServiceCmdID_name, int32(x))
}
func (TransferServiceCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 其他命令
type OtherCmdID int32

const (
	OtherCmdID_HEARTBEAT OtherCmdID = 0
)

var OtherCmdID_name = map[int32]string{
	0: "HEARTBEAT",
}
var OtherCmdID_value = map[string]int32{
	"HEARTBEAT": 0,
}

func (x OtherCmdID) String() string {
	return proto.EnumName(OtherCmdID_name, int32(x))
}
func (OtherCmdID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 消息类型
type MessageType int32

const (
	MessageType_SINGLE_TEXT MessageType = 0
)

var MessageType_name = map[int32]string{
	0: "SINGLE_TEXT",
}
var MessageType_value = map[string]int32{
	"SINGLE_TEXT": 0,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 客户端类型
type ClientType int32

const (
	ClientType_WEB     ClientType = 0
	ClientType_ANDROID ClientType = 1
	ClientType_IOS     ClientType = 2
	ClientType_MAC     ClientType = 3
	ClientType_WAP     ClientType = 4
	ClientType_WEIXIN  ClientType = 5
	ClientType_WINDOWS ClientType = 6
)

var ClientType_name = map[int32]string{
	0: "WEB",
	1: "ANDROID",
	2: "IOS",
	3: "MAC",
	4: "WAP",
	5: "WEIXIN",
	6: "WINDOWS",
}
var ClientType_value = map[string]int32{
	"WEB":     0,
	"ANDROID": 1,
	"IOS":     2,
	"MAC":     3,
	"WAP":     4,
	"WEIXIN":  5,
	"WINDOWS": 6,
}

func (x ClientType) String() string {
	return proto.EnumName(ClientType_name, int32(x))
}
func (ClientType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterEnum("protocol.Base.ServiceID", ServiceID_name, ServiceID_value)
	proto.RegisterEnum("protocol.Base.LoginCmdID", LoginCmdID_name, LoginCmdID_value)
	proto.RegisterEnum("protocol.Base.FriendCmdID", FriendCmdID_name, FriendCmdID_value)
	proto.RegisterEnum("protocol.Base.MessageCmdID", MessageCmdID_name, MessageCmdID_value)
	proto.RegisterEnum("protocol.Base.TransferServiceCmdID", TransferServiceCmdID_name, TransferServiceCmdID_value)
	proto.RegisterEnum("protocol.Base.OtherCmdID", OtherCmdID_name, OtherCmdID_value)
	proto.RegisterEnum("protocol.Base.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("protocol.Base.ClientType", ClientType_name, ClientType_value)
}

var fileDescriptor0 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x73, 0xd3, 0x30,
	0x10, 0x6d, 0xda, 0xd8, 0x49, 0xd6, 0x69, 0x11, 0x9a, 0x0e, 0x17, 0x66, 0x80, 0x03, 0x27, 0x1f,
	0x7c, 0xe1, 0xcc, 0x41, 0xb6, 0x15, 0x47, 0x83, 0x6d, 0x81, 0xa4, 0xd6, 0x9d, 0x5e, 0x3c, 0x69,
	0xaa, 0x16, 0x0f, 0x6d, 0xdc, 0xb1, 0x03, 0x33, 0xf0, 0x63, 0xf8, 0xad, 0xac, 0xec, 0xc2, 0xf0,
	0x75, 0xb2, 0xf6, 0xed, 0xdb, 0x7d, 0xbb, 0x6f, 0x0d, 0x10, 0x6f, 0x7a, 0x1b, 0x3d, 0x74, 0xed,
	0xbe, 0xa5, 0xc7, 0xc3, 0x67, 0xdb, 0xde, 0x45, 0x0e, 0x0c, 0x2f, 0x61, 0xa1, 0x6d, 0xf7, 0xa5,
	0xd9, 0x5a, 0x91, 0xd2, 0x05, 0x78, 0xb9, 0xcc, 0x44, 0x49, 0x0e, 0x28, 0x80, 0xbf, 0x52, 0x82,
	0x97, 0x29, 0x99, 0xd0, 0x00, 0x66, 0x05, 0xd7, 0x9a, 0x65, 0x9c, 0x1c, 0xd2, 0x53, 0x20, 0x46,
	0x95, 0x4c, 0xaf, 0xb8, 0xaa, 0x35, 0x57, 0xe7, 0x22, 0xe1, 0xe4, 0x88, 0xce, 0x61, 0x7a, 0x86,
	0x11, 0x99, 0xba, 0x1e, 0xd2, 0xac, 0xf1, 0xe9, 0x85, 0xdf, 0x27, 0x00, 0x79, 0x7b, 0xdb, 0xec,
	0x92, 0xfb, 0x6b, 0xec, 0x7e, 0x0c, 0x8b, 0xa1, 0x7b, 0xad, 0xf8, 0x07, 0x54, 0xf8, 0x2d, 0xd4,
	0x28, 0x72, 0x82, 0x5c, 0x99, 0xc9, 0x33, 0x33, 0xa4, 0x0f, 0xff, 0x88, 0x35, 0x2a, 0xa0, 0x6e,
	0xca, 0x9d, 0x5a, 0x6d, 0xe4, 0x3b, 0x3e, 0x36, 0x99, 0xfe, 0x07, 0xd5, 0xc4, 0xa3, 0x14, 0x4e,
	0x0a, 0x9d, 0x0d, 0xe3, 0xe1, 0x94, 0x8e, 0xe9, 0xff, 0x83, 0x69, 0x32, 0x0b, 0xdf, 0x42, 0xb0,
	0xea, 0x1a, 0xbb, 0xbb, 0x1e, 0x07, 0x7c, 0x06, 0x34, 0x11, 0x69, 0x3d, 0xee, 0xed, 0xca, 0x6a,
	0x96, 0xe7, 0x38, 0xe9, 0xdf, 0xb8, 0x1e, 0xf0, 0x49, 0xf8, 0x0a, 0x96, 0x85, 0xed, 0xfb, 0xcd,
	0xad, 0x1d, 0xeb, 0x09, 0x2c, 0x1d, 0xcf, 0xc9, 0xa4, 0xcc, 0x30, 0x72, 0x10, 0xbe, 0x86, 0x53,
	0xd3, 0x6d, 0x76, 0xfd, 0x8d, 0xed, 0x1e, 0x5d, 0x1e, 0x99, 0x4b, 0x98, 0x1b, 0xc5, 0x4a, 0x67,
	0x22, 0xb2, 0x9e, 0x03, 0xc8, 0xfd, 0x47, 0xdb, 0xfd, 0xb2, 0x69, 0xcd, 0x99, 0x32, 0x31, 0x67,
	0x06, 0x93, 0x2f, 0x20, 0x78, 0x14, 0x31, 0x5f, 0x1f, 0x2c, 0x7d, 0x02, 0x81, 0x16, 0x65, 0x96,
	0xe3, 0xc2, 0xfc, 0xc2, 0xe5, 0xcf, 0x01, 0x92, 0x3b, 0xdc, 0x61, 0x3f, 0xa4, 0x67, 0x70, 0x54,
	0xf1, 0x18, 0x67, 0xc6, 0x9b, 0xb1, 0x32, 0x55, 0x52, 0xb8, 0x03, 0x22, 0x2a, 0xa4, 0x46, 0x53,
	0xf1, 0x51, 0xb0, 0x04, 0xdd, 0x74, 0x3c, 0xf6, 0x1e, 0x0d, 0xc4, 0x3b, 0x57, 0x5c, 0x5c, 0xe0,
	0xcd, 0x3d, 0x57, 0x53, 0x89, 0x32, 0x95, 0x95, 0x26, 0x7e, 0xfc, 0x12, 0x9e, 0x6e, 0xdb, 0xfb,
	0xe8, 0x5b, 0xf4, 0xa9, 0x19, 0xff, 0x9c, 0xab, 0xcf, 0x37, 0xeb, 0xc9, 0xe5, 0xfc, 0xe7, 0xef,
	0x73, 0xe5, 0x0f, 0xaf, 0x37, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x19, 0x79, 0x73, 0x25, 0x5d,
	0x02, 0x00, 0x00,
}
